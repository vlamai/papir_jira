// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: src/taskTracker.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskTrackerClient is the client API for TaskTracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskTrackerClient interface {
	GetTaskName(ctx context.Context, in *GetTaskNameRequest, opts ...grpc.CallOption) (*GetTaskNameResponse, error)
}

type taskTrackerClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskTrackerClient(cc grpc.ClientConnInterface) TaskTrackerClient {
	return &taskTrackerClient{cc}
}

func (c *taskTrackerClient) GetTaskName(ctx context.Context, in *GetTaskNameRequest, opts ...grpc.CallOption) (*GetTaskNameResponse, error) {
	out := new(GetTaskNameResponse)
	err := c.cc.Invoke(ctx, "/taskTracker.TaskTracker/GetTaskName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskTrackerServer is the server API for TaskTracker service.
// All implementations must embed UnimplementedTaskTrackerServer
// for forward compatibility
type TaskTrackerServer interface {
	GetTaskName(context.Context, *GetTaskNameRequest) (*GetTaskNameResponse, error)
	mustEmbedUnimplementedTaskTrackerServer()
}

// UnimplementedTaskTrackerServer must be embedded to have forward compatible implementations.
type UnimplementedTaskTrackerServer struct {
}

func (UnimplementedTaskTrackerServer) GetTaskName(context.Context, *GetTaskNameRequest) (*GetTaskNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskName not implemented")
}
func (UnimplementedTaskTrackerServer) mustEmbedUnimplementedTaskTrackerServer() {}

// UnsafeTaskTrackerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskTrackerServer will
// result in compilation errors.
type UnsafeTaskTrackerServer interface {
	mustEmbedUnimplementedTaskTrackerServer()
}

func RegisterTaskTrackerServer(s grpc.ServiceRegistrar, srv TaskTrackerServer) {
	s.RegisterService(&TaskTracker_ServiceDesc, srv)
}

func _TaskTracker_GetTaskName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskTrackerServer).GetTaskName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taskTracker.TaskTracker/GetTaskName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskTrackerServer).GetTaskName(ctx, req.(*GetTaskNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskTracker_ServiceDesc is the grpc.ServiceDesc for TaskTracker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskTracker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taskTracker.TaskTracker",
	HandlerType: (*TaskTrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTaskName",
			Handler:    _TaskTracker_GetTaskName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/taskTracker.proto",
}
